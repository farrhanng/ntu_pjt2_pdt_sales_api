# Define the CircleCI version and any orbs (pre-configured CircleCI packages that provide commands, jobs, and executors)
version: 2.1
orbs:
  docker: circleci/docker@2.4.0
  snyk: snyk/snyk@2.0.1
  heroku: circleci/heroku@2.0.0

# Define a custom executor with a specified Docker image
executors:
  default-executor:
    docker:
      - image: cimg/openjdk:17.0.8

# Define a series of jobs to be run
jobs:
  # The 'build' job checks out the code and packages the Spring Boot app
  build: 
    executor: default-executor
    steps:
      - checkout  # Check out your code from version control
      
      # Add a step to update the permissions of the mvnw file
      - run:
          name: Update mvnw permissions
          command: chmod +x ./mvnw
      
      - run:
          name: Build Spring Boot App
          # Compile and package your Spring Boot app with Maven
          command: |
            ./mvnw clean package -DskipTests
            mv target/pdt_sales-0.0.1-SNAPSHOT.jar app.jar
  
  # The 'test' job checks out the code and runs unit tests
  test:
    executor: default-executor
    steps:
      - checkout
      - run:
          name: Run 10 Spring Boot Unit Tests in 2 Java Files
          command: |
            mvn test 

  # The 'synk_scan' job performs a security scan on the Docker image using Snyk
  synk_scan:
    executor: default-executor
    environment:
      IMAGE_NAME: lohcd/pdt_sales

    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Update mvnw permissions
          command: chmod +x ./mvnw

      - run:
          name: Build Spring Boot App
          command: ./mvnw clean package -DskipTests

      - save_cache:
          key: app-jar-{{ checksum "pom.xml" }}
          paths:
            - ./target/pdt_sales-0.0.1-SNAPSHOT.jar

      - restore_cache:
          key: app-jar-{{ checksum "pom.xml" }}

      - run:
          name: Build Docker image
          command: docker build -t $IMAGE_NAME .

      - snyk/scan:
          docker-image-name: $IMAGE_NAME
          severity-threshold: high

  # The 'build-and-push' job creates a Docker image and pushes it to Docker Hub
  build-and-push:
    executor: default-executor  # Use a Docker executor
    steps:
      - setup_remote_docker
      - checkout

      - run:
          name: Update mvnw permissions
          command: chmod +x ./mvnw

      - run:
          name: Build Spring Boot App
          command: ./mvnw clean package -DskipTests

      - save_cache:
          key: app-jar-{{ checksum "pom.xml" }}
          paths:
            - ./target/pdt_sales-0.0.1-SNAPSHOT.jar

      - restore_cache:
          key: app-jar-{{ checksum "pom.xml" }}

      - run:
          name: Docker Hub Login
          command: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_LOGIN" --password-stdin

      - docker/build:
          image: lohcd/pdt_sales
          tag: v1.0.0
      - docker/push:
          image: lohcd/pdt_sales
          tag: v1.0.0

  # The 'deploy' job deploys the application to Heroku
  deploy:
    executor: default-executor
    steps:
      - setup_remote_docker
      - heroku/install
      - checkout
      - run:
          name: Login to Heroku Container Registry
          command: heroku container:login

      - run:
          name: Pull Spring Boot App Image from Docker Hub
          command: docker pull lohcd/pdt_sales:v1.0.0

      - run:
          name: Tag and Push the Image to Heroku Container Registry
          command: |
            docker tag lohcd/pdt_sales:v1.0.0 registry.heroku.com/group3-pdt-sales-api-devops/web
            docker push registry.heroku.com/group3-pdt-sales-api-devops/web

      - run:
          name: Release the Heroku app
          command: heroku container:release web -a group3-pdt-sales-api-devops

# Define workflows that specify which jobs run and in what order, based on the branch that's pushed
workflows:
  version: 2
  # The 'ci_flow' workflow is triggered when there are changes to the 'develop' branch
  ci_flow:
    jobs:
      - build:
          filters:
            branches:
              only:
                - develop
      - test:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
      - synk_scan:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
      - build-and-push:
          requires:
            - test
          filters:
            branches:
              only:
                - develop

  # The 'cicd_flow' workflow is triggered when there are changes to the 'release' branch
  cicd_flow:
    jobs:
      - build:
          filters:
            branches:
              only:
                - release
      - test:
          requires:
            - build
          filters:
            branches:
              only:
                - release
      - synk_scan:
          requires:
            - build
          filters:
            branches:
              only:
                - release
      - build-and-push:
          requires:
            - test
          filters:
            branches:
              only:
                - release
      - deploy:
          requires:
            - build-and-push
          filters:
            branches:
              only:
                - release           

